1, 抓取log


(1) 获取整个disk的file mapping
	.\ntfs_start.ps1 C: <out_fn>
		<out_fn> => disk-mapping.csv
	记下offset和size

(2) 实时获取test file的mapping
	pcmv.ps1 <out_fn>： 
		<out_fn> => file-mapping.txt
	
(3) 获取trace：
	<a>	运行bushound
	config: filter: CMD，OK， IN， OUT
	column： Device, Phase, Data, Description, Delta Cmd.Phase.Ofs, Time	
		(*) 必须按照上述顺序输出列。Data列的宽度设置为16字节
	保存到 => trace.txt
	
	<b> Analyzer获取TRACE
	Decode NVMe => spreadsheet view (color) => export to csv.
	=> LeCroy.csv
	
(4) 运行processmonitor
	filter: Process Name, is not, PCMark.exe, then, exclude.
	class: file system only
	=> event.csv
	
(5) 运行PCMV

(6) 暂停pcmv.ps1
	ctrl+c
	暂停bushound, 保存到trace.txt
	保存process monitor到event.csv


log解析：
(1) 加载workload-analysis模块
	import-module workload-analysis.dll
	
(2) 解析trace,保存结果到trace.csv
	<a> bushound: 	.\parse-bushund.ps1 <source> <dst.csv>
		=> source = trace.txt
		=> dst.csv = trace.csv
		
	<b> LeCroy NVMe Analyzer
		.\parse-nvme.ps1 <source> <dst.csv>
		=> source = LeCroy.csv
		=> dst.csv = trace.csv
		
	<c> LeCroy SATA Analyzer
		LeCroy的结果保存为多个csv文件： xxx_Part[n].csv, 其中[n]为自然数
		.\parse-lecroy-sata.ps1 <source> <dst.csv>
		<source> 为csv文件系列文件名除去编号和.csv
		
(3) 解析
	.\mark-trace.ps1 -tar <log文件夹> -offset <offset> -size <disk_size>
	
具体分析内容(已在mark-trace.ps1中实现)
#(2.1) 解析bushound:
#	.\parse-bushund.ps1 <source> <dst.csv>
#		=> source = trace.txt
#		=> dst.csv = trace.csv
		
(2.2) 解析file mapping:
	$file_mapping = .\parse-mapping.ps1 <mapping_file> -offset <offset>
	$file_mapping | export-clixml <xml_file>
	
	<mapping_file> => file-mapping.txt
	<xml_file> => file-mapping.xml
	
	
#(2.3) 处理event:
#	.\process-event.ps1 -src_fn <process monitor file.csv> -mapping_list $mapping -offset | export-csv <out>
#		event.csv => result.csv
		
(2.3) 处理event：
	.\parse-event.ps1 -src_fn event.csv | export-csv event-new.csv

(2.4) 导入mapping
Import-Csv .\disk-mapping.csv | Set-StaticMapping -secs <disk size in sector> -offset <disk first lba>
Add-FileMapping -fn $file_mapping[0].fn -segments $file_mapping[0].segments -disk_offset <disk first lba>
	
(2.5) 分析trace，标记trace
标记trace
Import-Csv .\trace.csv | Convert-Trace | Select-Object cmd_id,cmd,op_code,lba,len,offset,fid,fn | export-csv .\trace-mark.csv
标记event
import-csv .\event-new.csv | convert-event -disk_offset $offset | select-object "Time of Day","Operation","lba","secs","offset","fid","Path","Detail" | export-csv .\event-mark.csv


Trace分析
(4) 分解trace到cluster单位
.\convert-trace-cluster.ps1 <source.csv> <dst.csv>
	- <source.csv>为(2)解析trace测结果
	
（5） 计算read/write count
Import-Module ..\DEBUG_DYNAMIC\workload-analyzer.dll
Set-DiskInfo -capacity 211360000 -offset 0
Import-csv <trace.csv> | Import-Trace | export-csv <count.csv>


PCMark10 Trace分析
（1） File Trace分析
	- File Trace是记录软件调用文件系统IO的行文，包括CreateFile, ReadFile, WriteFile等操作
	- 我们用ProcessMonitor工具分析PCMark10的File Trace。
		ProcessMonitor设置Filter为：Include PCMark10-Storage.exe和PCMark10.exe
	- 总体概念：
		PCMark10 会在C:\下创建文件夹C:\PCMark_10_Storage_<日期-时间>\c的文件夹。然后把模拟的C盘下的文件复制到这个文件下。并且在这个文件夹下模拟文件操作。
		测试时，PCMark10首先做一些准备工作，录入创建子文件夹，复制一些文件等。
		然后，按顺序执行每个trace(例如exc, pow等)。总共重复3次。
		最后是清理操作。
	- 分析目标：
		提取每个trace。
		
	-分析方法：
		= trace的特征，每个trace的开始的时候，会连续的创建一组文件（可能会被Read/Write打断），然后对创建的文件FLUSH。文件创建的次数和Flush的次数相等。
			trace结束的时候，会连续的关闭所有打开的文件。对于每个trace而言，打开文件的总数和关闭的总数一定相等。
		- ConvertFrom-FileTrace 从 ProcessMonitor的Log（csv文件）中提取一下信息
			仅保留对C:\PCMark_10_Storage_<日期-时间> 文件夹一下的操作
			提取：timestamp, 文件名转换为Hash, OP Code：解析Create的具体内容（文件夹，文件，删除等）, 解析offset和secs, 
			做一些计算：Read,Write的累计量，文件的打开数等。
		


import-csv .\test-1.csv | Convert-FileTrace | select-object ts,path_hash,is_dir,test_file,opened,op_code,offset,secs,path | Export-Csv out.csv


[小结 20210622]
- 目标：通过分析PCMark10的TRACE，提取PCMark10开始计分（test trace）之前的特征。是的F/W可以提前识别PCMark10的启动，以为测试做准备
- 今天工作：
	对TRACE进行格式化，Convert-FileTrace
	（1）Timestamp转换成浮点数型，（2）识别测试文件或者其他文件，（3）增减is_dir字段。
	import-csv .\test-1.csv | Convert-FileTrace | select-object ts,path_hash,is_dir,test_file,opened,op_code,offset,secs,path | Export-Csv out.csv
	
- 今天发现：
	PCMark10的启动包括几个阶段（1）加载测试模块，exe文件，dll文件等。（2）读取数据文件。（3）创建测试用的文件夹及其子目录，文件。
	（2）读取数据文件是一个近似的长数据seq read，可以作为识别点。
	（3）需要分析PA TRACE，检查是否有相关读写文件分配表的操作

- 下一步：
	（1）读取文件分配表，将PM(Process Monitor) trace标记为PA Trace
	（2）对比PM TRACE和PA TRACE，看是否能够提取PA的相关特征。


[20220324]
JumpStart的trace分析
(1) 分析一台PC的 trace
	(1) 加载file mapping
	
[20230916]
追加trace分析：
（1）Viavi trace解析：
	.\parse-viavi.ps1 -src_fn <> -dst_fn
	
（2）给Trace添加文件映射
	.\mark-file.ps1 -dir <>
	dir中包含trace文件（trace.csv）和filemap（filemap.csv）。filemap由mytool\ntfs_lba2file\dump-filemapping.ps1获得。
	输出文件为dir\trace-fs.csv
	TODO:file mapping的产生更加自动化，包含不同分区，并且要对FAT32分区进行解析。
		mark trace的时候，增加文件的偏移量。
































	